01. What is the expected running time of the following C# code? Explain why. Assume the array's size is n.

long Compute(int[] arr)
{
    long count = 0;
    for (int i=0; i<arr.Length; i++)
    {
        int start = 0, end = arr.Length-1;
        while (start < end)
            if (arr[start] < arr[end])
                { start++; count++; }
            else 
                end--;
    }
    return count;
}


Best-case: O(n) => the while loop condition is never true, or only once per loop(for-loop)

Worst-case:O(n^2) => the while loop condition is aways true and runs through all n elements of the array


----------------------------------------------------------------------------------------------------------

02. What is the expected running time of the following C# code? Explain why.

long CalcCount(int[,] matrix)
{
    long count = 0;
    for (int row=0; row<matrix.GetLength(0); row++)
        if (matrix[row, 0] % 2 == 0)
            for (int col=0; col<matrix.GetLength(1); col++)
                if (matrix[row,col] > 0)
                    count++;
    return count;
}

Assume the input matrix has size of n * m.


O(n * (m / 2 + 1)) ~= O(n * m) => the internal for-loop will run for every even number in matrix[row, 0] ->  about 50% of times


----------------------------------------------------------------------------------------------------------


03. * What is the expected running time of the following C# code? Explain why.


long CalcSum(int[,] matrix, int row)
{
    long sum = 0;
    for (int col = 0; col < matrix.GetLength(0); col++) 
        sum += matrix[row, col];
    if (row + 1 < matrix.GetLength(1)) 
        sum += CalcSum(matrix, row + 1);
    return sum;
}

Console.WriteLine(CalcSum(matrix, 0));


Assume the input matrix has size of n * m.



O(n * n)  = O(n^2)
The recursion calls the for-loop n times.
Each recursive for-loop calculates the sum of entire row - so the diferent for-loops are one after another, not one inside another.
(If they were one inside another - Time Complexity shod be n ^ n.)
I have tested the algorithm with n = 10000 and have loading time of ~ 4 sec which is just about right for O(n^2) :)




